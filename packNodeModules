#!/usr/bin/env node
const {exec} = require('child_process');
const yargs = require('yargs/yargs')
const {hideBin} = require('yargs/helpers')

const getRecursiveDependencies = (list) => {
    const mainDependencies = Object.keys(list);
    const result = mainDependencies.map(dep => `${dep}@${list[dep].version}`);
    mainDependencies.forEach(dep => {
        if (list[dep].dependencies) {
            result.push(...getRecursiveDependencies(list[dep].dependencies));
        }
    });
    return result;
};


const getPackageListFromLock = (packageLock) => {
    const dependencies = getRecursiveDependencies(JSON.parse(packageLock).dependencies);
    return [...new Set(dependencies)];
};


async function packageDependencies(lisOfDependencies, target = 'tars') {
    exec(`mkdir ${target}`);
    try{
        const installedPackages = lisOfDependencies.map(dependence => asyncExec(`npm pack ${dependence} --pack-destination ./${target}`));
        console.log('packed the following packages:\n',
            (await Promise.allSettled(installedPackages))
                .map(package=>package.value)
        )
    }catch(e){
        console.error(e);
    }
}

async function asyncExec(command) {
    return new Promise((resolve, reject) => {
        exec(command, (err, stdout) => {
            if (err) {
                return reject(err);
            }
            resolve(stdout);
        });
    });
}

async function main(argv) {
    const path = argv.path ? `${argv.path}/` : ''
    const lockFlag = argv['use-installed'] ? '' : '--package-lock-only';
    const packageLock = await asyncExec(`npm ls ${path} --all ${lockFlag} --json`);
    const packageList = getPackageListFromLock(packageLock);
    packageDependencies(packageList, argv.target);
}

yargs(hideBin(process.argv))
    .command('$0', 'packNodeModules all dependencies for project', (yargs) => {
        return yargs
    }, main)
    .option('target', {
        alias: 't',
        type: 'string',
        description: 'target folder for tars'
    }).option('use-installed', {
        alias: 'i',
        type: 'boolean',
        description: 'will use installed packages from node modules instead of package-lock.json file.'
    })
    .parse()
